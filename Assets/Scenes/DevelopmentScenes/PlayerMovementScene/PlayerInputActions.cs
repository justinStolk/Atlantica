//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scenes/DevelopmentScenes/PlayerMovementScene/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c759354f-e4c4-4e7b-a5de-ac6b9c4ef0ae"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""de594fc4-7bcc-41e3-893a-ae041dd24337"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5269567b-9ca7-4aa7-af14-780fedda5a3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0cdfe6e5-c799-4a8e-869f-6fd57e6af84a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwimUp"",
                    ""type"": ""Button"",
                    ""id"": ""2ccadcc1-47b0-4971-991f-e14289d5db11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwimDown"",
                    ""type"": ""Button"",
                    ""id"": ""acde851f-00a8-47b2-92fc-d227339cbaa0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""2b768b22-15ec-45e0-b5eb-ab18d97760a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToBackPack"",
                    ""type"": ""Button"",
                    ""id"": ""3fdec4a5-a00d-4eef-b9d7-98059fa07e74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleBackPackFollow"",
                    ""type"": ""Button"",
                    ""id"": ""9acabde0-0630-44c0-b30f-6d3d97286417"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""eca54628-f1d1-4507-a6d8-3031bc3d7232"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""663b79e3-36d2-47c6-97b5-6a60910b4cb1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6c21e08e-7e7a-42f0-acea-ed717f2d8d4e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d28ce4bd-89b5-4c7c-8752-631ae6ae578c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""73b3cfc4-0ed4-42e8-a97d-e9330ef9767e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""08fe7709-ec67-4a41-b136-c61a4c8f075a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.2)"",
                    ""groups"": ""Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef563b69-f269-4fa0-ba62-651440822e9e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a41b3232-c166-45a5-aed9-6841953d5811"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad6c21f7-34d7-4b0e-a3f0-a40b79649402"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e34af52-9cde-4f70-a529-e23ebc783d27"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""groups"": ""Controller"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bcf3628-97c2-4140-a488-40eb4e24bd69"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SwimUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6d3f4fa-dc39-45b0-881c-9af4b7b16fc4"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SwimUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dff4985-4056-47e8-9ae9-c4ee25f7c909"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcf98b6e-b3bd-463a-be4a-c4ff8d24d3a8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbd1d9e8-8d0b-4f5a-9e1b-209a1aaea881"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SwimDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30d6799f-39e2-42a3-90b5-a06616174e54"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SwitchToBackPack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2fc79b2-ae88-4187-bab4-d1b4e7cdd594"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleBackPackFollow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Backpack"",
            ""id"": ""8d65ebec-87f0-445c-82f7-4b4492ac4be7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""54b142dd-572e-4fd2-978f-eb745501d90c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchToPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""5886bca9-89d2-4e27-a863-5cbbf2f75be7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Value"",
                    ""id"": ""137be78d-8106-45f7-8057-056df7630975"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TogglePlayerFollow"",
                    ""type"": ""Button"",
                    ""id"": ""50431331-a3e5-4e4e-a488-1ec81a2f25b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7fde6ca3-3269-4373-969d-89d15c5e152e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fdc80cb3-0580-432d-a7b4-4ecdc3c61849"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""efd1ecd5-b156-4e3f-9601-16fb1d1c9a19"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b160b01-69c0-48ed-a397-dae8315b6c39"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""36cf071e-4ccb-4c24-a112-c84c4815f939"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f7c3477d-ff2e-431a-b1d8-b00f2c60e61c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.2)"",
                    ""groups"": ""Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66758ef0-cee6-497c-a914-296e899cca29"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SwitchToPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""274efbe2-a2b7-45b0-8f36-1c6d3e81340c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9619078d-93a6-410e-8da0-aaa3f2bfadff"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""285bc855-d51b-44b1-b7a4-10738822ce94"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d4d40003-9054-4b2a-8d87-09b2d4cb239a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePlayerFollow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_SwimUp = m_Player.FindAction("SwimUp", throwIfNotFound: true);
        m_Player_SwimDown = m_Player.FindAction("SwimDown", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_SwitchToBackPack = m_Player.FindAction("SwitchToBackPack", throwIfNotFound: true);
        m_Player_ToggleBackPackFollow = m_Player.FindAction("ToggleBackPackFollow", throwIfNotFound: true);
        // Backpack
        m_Backpack = asset.FindActionMap("Backpack", throwIfNotFound: true);
        m_Backpack_Move = m_Backpack.FindAction("Move", throwIfNotFound: true);
        m_Backpack_SwitchToPlayer = m_Backpack.FindAction("SwitchToPlayer", throwIfNotFound: true);
        m_Backpack_UpDown = m_Backpack.FindAction("UpDown", throwIfNotFound: true);
        m_Backpack_TogglePlayerFollow = m_Backpack.FindAction("TogglePlayerFollow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_SwimUp;
    private readonly InputAction m_Player_SwimDown;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_SwitchToBackPack;
    private readonly InputAction m_Player_ToggleBackPackFollow;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @SwimUp => m_Wrapper.m_Player_SwimUp;
        public InputAction @SwimDown => m_Wrapper.m_Player_SwimDown;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @SwitchToBackPack => m_Wrapper.m_Player_SwitchToBackPack;
        public InputAction @ToggleBackPackFollow => m_Wrapper.m_Player_ToggleBackPackFollow;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @SwimUp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwimUp;
                @SwimUp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwimUp;
                @SwimUp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwimUp;
                @SwimDown.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwimDown;
                @SwimDown.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwimDown;
                @SwimDown.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwimDown;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @SwitchToBackPack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchToBackPack;
                @SwitchToBackPack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchToBackPack;
                @SwitchToBackPack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchToBackPack;
                @ToggleBackPackFollow.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleBackPackFollow;
                @ToggleBackPackFollow.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleBackPackFollow;
                @ToggleBackPackFollow.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleBackPackFollow;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @SwimUp.started += instance.OnSwimUp;
                @SwimUp.performed += instance.OnSwimUp;
                @SwimUp.canceled += instance.OnSwimUp;
                @SwimDown.started += instance.OnSwimDown;
                @SwimDown.performed += instance.OnSwimDown;
                @SwimDown.canceled += instance.OnSwimDown;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @SwitchToBackPack.started += instance.OnSwitchToBackPack;
                @SwitchToBackPack.performed += instance.OnSwitchToBackPack;
                @SwitchToBackPack.canceled += instance.OnSwitchToBackPack;
                @ToggleBackPackFollow.started += instance.OnToggleBackPackFollow;
                @ToggleBackPackFollow.performed += instance.OnToggleBackPackFollow;
                @ToggleBackPackFollow.canceled += instance.OnToggleBackPackFollow;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Backpack
    private readonly InputActionMap m_Backpack;
    private IBackpackActions m_BackpackActionsCallbackInterface;
    private readonly InputAction m_Backpack_Move;
    private readonly InputAction m_Backpack_SwitchToPlayer;
    private readonly InputAction m_Backpack_UpDown;
    private readonly InputAction m_Backpack_TogglePlayerFollow;
    public struct BackpackActions
    {
        private @PlayerInputActions m_Wrapper;
        public BackpackActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Backpack_Move;
        public InputAction @SwitchToPlayer => m_Wrapper.m_Backpack_SwitchToPlayer;
        public InputAction @UpDown => m_Wrapper.m_Backpack_UpDown;
        public InputAction @TogglePlayerFollow => m_Wrapper.m_Backpack_TogglePlayerFollow;
        public InputActionMap Get() { return m_Wrapper.m_Backpack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BackpackActions set) { return set.Get(); }
        public void SetCallbacks(IBackpackActions instance)
        {
            if (m_Wrapper.m_BackpackActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BackpackActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BackpackActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BackpackActionsCallbackInterface.OnMove;
                @SwitchToPlayer.started -= m_Wrapper.m_BackpackActionsCallbackInterface.OnSwitchToPlayer;
                @SwitchToPlayer.performed -= m_Wrapper.m_BackpackActionsCallbackInterface.OnSwitchToPlayer;
                @SwitchToPlayer.canceled -= m_Wrapper.m_BackpackActionsCallbackInterface.OnSwitchToPlayer;
                @UpDown.started -= m_Wrapper.m_BackpackActionsCallbackInterface.OnUpDown;
                @UpDown.performed -= m_Wrapper.m_BackpackActionsCallbackInterface.OnUpDown;
                @UpDown.canceled -= m_Wrapper.m_BackpackActionsCallbackInterface.OnUpDown;
                @TogglePlayerFollow.started -= m_Wrapper.m_BackpackActionsCallbackInterface.OnTogglePlayerFollow;
                @TogglePlayerFollow.performed -= m_Wrapper.m_BackpackActionsCallbackInterface.OnTogglePlayerFollow;
                @TogglePlayerFollow.canceled -= m_Wrapper.m_BackpackActionsCallbackInterface.OnTogglePlayerFollow;
            }
            m_Wrapper.m_BackpackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @SwitchToPlayer.started += instance.OnSwitchToPlayer;
                @SwitchToPlayer.performed += instance.OnSwitchToPlayer;
                @SwitchToPlayer.canceled += instance.OnSwitchToPlayer;
                @UpDown.started += instance.OnUpDown;
                @UpDown.performed += instance.OnUpDown;
                @UpDown.canceled += instance.OnUpDown;
                @TogglePlayerFollow.started += instance.OnTogglePlayerFollow;
                @TogglePlayerFollow.performed += instance.OnTogglePlayerFollow;
                @TogglePlayerFollow.canceled += instance.OnTogglePlayerFollow;
            }
        }
    }
    public BackpackActions @Backpack => new BackpackActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSwimUp(InputAction.CallbackContext context);
        void OnSwimDown(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSwitchToBackPack(InputAction.CallbackContext context);
        void OnToggleBackPackFollow(InputAction.CallbackContext context);
    }
    public interface IBackpackActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSwitchToPlayer(InputAction.CallbackContext context);
        void OnUpDown(InputAction.CallbackContext context);
        void OnTogglePlayerFollow(InputAction.CallbackContext context);
    }
}
